provider "aws" {
  shared_credentials_files = ["~/.aws/credentials"]
  region                   = var.region
}

#Certificate has to be created in us-east-1
provider "aws" {
  shared_credentials_files = ["~/.aws/credentials"]
  region                   = "us-east-1"
  alias                    = "useast1"
}

resource "aws_servicecatalogappregistry_application" "autocontenthub_app" {
  name        = "autocontenthub"
  description = "Content generated by LLM"
}

# Bucket 

resource "aws_s3_bucket" "domain_bucket" {
  bucket = var.domain_name
  tags   = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_s3_bucket" "subdomain_bucket" {
  bucket = "www.${var.domain_name}"
  tags   = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_s3_bucket" "log_bucket" {
  bucket = "log.${var.domain_name}"
  tags   = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_s3_object" "object" {
  bucket = aws_s3_bucket.log_bucket.id
  key    = "log/"
  tags   = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_s3_bucket_logging" "server_logging" {
  bucket        = aws_s3_bucket.domain_bucket.id
  target_bucket = aws_s3_bucket.log_bucket.id
  target_prefix = "log/"
}

resource "aws_s3_bucket_website_configuration" "subdomain_redirect" {
  bucket = aws_s3_bucket.subdomain_bucket.bucket

  redirect_all_requests_to {
    host_name = var.domain_name
    protocol  = "http"
  }
}

resource "aws_s3_bucket_public_access_block" "public_access_block" {
  bucket                  = aws_s3_bucket.domain_bucket.id
  block_public_acls       = false
  block_public_policy     = false
  ignore_public_acls      = false
  restrict_public_buckets = false
}

resource "aws_s3_object" "upload_object" {
  for_each     = fileset("../static/", "*")
  bucket       = aws_s3_bucket.domain_bucket.id
  key          = each.value
  source       = "../static/${each.value}"
  etag         = filemd5("../static/${each.value}")
  content_type = "text/html"
  tags         = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_s3_bucket_policy" "allow_access_from_everywhere" {
  bucket = aws_s3_bucket.domain_bucket.id
  policy = data.aws_iam_policy_document.allow_access_from_everywhere.json
}

data "aws_iam_policy_document" "allow_access_from_everywhere" {
  statement {
    principals {
      type        = "*"
      identifiers = ["*"]
    }

    actions = [
      "s3:GetObject",
    ]

    resources = [
      "${aws_s3_bucket.domain_bucket.arn}/*",
    ]
  }
}

# Dynamo

resource "aws_dynamodb_table" "dynamotable" {
  name = "AutoContentHub"

  billing_mode = "PAY_PER_REQUEST"

  hash_key  = "section"
  range_key = "date"

  attribute {
    name = "section"
    type = "S"
  }

  attribute {
    name = "date"
    type = "S"
  }

  global_secondary_index {
    name            = "date-index"
    hash_key        = "date"
    projection_type = "ALL"
  }

  tags = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

# Certificate

resource "aws_acm_certificate" "cert-my-aws-project-com" {
  provider                  = aws.useast1
  domain_name               = var.domain_name
  validation_method         = "DNS"
  subject_alternative_names = ["www.${var.domain_name}", var.domain_name]

  lifecycle {
    create_before_destroy = true
  }
  tags = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

# Cloudfront

# https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-add-index.html
resource "aws_cloudfront_function" "index_function" {
  name    = "add_index"
  runtime = "cloudfront-js-2.0"
  comment = "Add index.html to routes without extension"
  publish = true
  code    = file("${path.module}/index_function.js")
}

resource "aws_cloudfront_distribution" "subdomain-distribution" {
  origin {
    domain_name = aws_s3_bucket_website_configuration.subdomain_redirect.website_endpoint
    origin_id   = "S3 static website"
    custom_origin_config {
      http_port              = "80"
      https_port             = "443"
      origin_protocol_policy = "http-only"
      origin_ssl_protocols   = ["TLSv1", "TLSv1.1", "TLSv1.2"]
    }
  }

  aliases = ["www.${var.domain_name}"]

  enabled             = true
  default_root_object = "index.html"

  default_cache_behavior {
    allowed_methods = ["GET", "HEAD"]
    cached_methods  = ["GET", "HEAD"]
    #  Using the CachingDisabled managed policy ID
    cache_policy_id = "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"

    target_origin_id = "S3 static website"

    viewer_protocol_policy = "redirect-to-https"

    function_association {
      event_type   = "viewer-request"
      function_arn = aws_cloudfront_function.index_function.arn
    }

  }

  custom_error_response {
    error_code         = "403"
    response_code      = "404"
    response_page_path = "/error.html"
  }

  viewer_certificate {
    acm_certificate_arn = aws_acm_certificate.cert-my-aws-project-com.arn
    ssl_support_method  = "sni-only"
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  depends_on = [
    aws_acm_certificate.cert-my-aws-project-com,
  ]
  tags = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_cloudfront_distribution" "domain-distribution" {
  origin {
    domain_name = aws_s3_bucket.domain_bucket.bucket_regional_domain_name
    origin_id   = "S3-Origin"
  }

  aliases = [var.domain_name]

  enabled             = true
  default_root_object = "index.html"

  default_cache_behavior {
    allowed_methods = ["GET", "HEAD"]
    cached_methods  = ["GET", "HEAD"]
    #  Using the CachingDisabled managed policy ID
    cache_policy_id = "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"

    target_origin_id = "S3-Origin"

    viewer_protocol_policy = "redirect-to-https"

    function_association {
      event_type   = "viewer-request"
      function_arn = aws_cloudfront_function.index_function.arn
    }
  }

  custom_error_response {
    error_code         = "403"
    response_code      = "404"
    response_page_path = "/error.html"
  }

  viewer_certificate {
    acm_certificate_arn = aws_acm_certificate.cert-my-aws-project-com.arn
    ssl_support_method  = "sni-only"
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  depends_on = [
    aws_acm_certificate.cert-my-aws-project-com,
  ]
  tags = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

# Route 53
resource "aws_route53_zone" "domain" {
  name = var.domain_name
  tags = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_route53_record" "subdomain_route" {
  zone_id = aws_route53_zone.domain.zone_id
  name    = "www"
  type    = "A"

  alias {
    name                   = aws_cloudfront_distribution.subdomain-distribution.domain_name
    zone_id                = aws_cloudfront_distribution.subdomain-distribution.hosted_zone_id
    evaluate_target_health = false
  }
}

resource "aws_route53_record" "domain_route" {
  zone_id = aws_route53_zone.domain.zone_id
  name    = var.domain_name
  type    = "A"

  alias {
    name                   = aws_cloudfront_distribution.domain-distribution.domain_name
    zone_id                = aws_cloudfront_distribution.domain-distribution.hosted_zone_id
    evaluate_target_health = false
  }
}

# Certificate validation

resource "aws_acm_certificate_validation" "cert-validation" {
  provider                = aws.useast1
  certificate_arn         = aws_acm_certificate.cert-my-aws-project-com.arn
  validation_record_fqdns = [for record in aws_route53_record.cert-validation-record : record.fqdn]
}


resource "aws_route53_record" "cert-validation-record" {
  for_each = {
    for dvo in aws_acm_certificate.cert-my-aws-project-com.domain_validation_options : dvo.domain_name => {
      name   = dvo.resource_record_name
      record = dvo.resource_record_value
      type   = dvo.resource_record_type
    }
  }

  allow_overwrite = true
  name            = each.value.name
  records         = [each.value.record]
  ttl             = 60
  type            = each.value.type
  zone_id         = aws_route53_zone.domain.zone_id
}

# OpenAI secret 

resource "aws_secretsmanager_secret" "openai" {
  name                    = "openai"
  description             = "OpenAI token"
  recovery_window_in_days = 0
  tags                    = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_secretsmanager_secret_version" "openai_secret" {
  secret_id     = aws_secretsmanager_secret.openai.id
  secret_string = var.openai_token
}

# Lambda 

resource "aws_iam_role" "lambda_role" {
  name = "lambda_execution_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Effect = "Allow",
      Principal = {
        Service = "lambda.amazonaws.com",
      },
    }],
  })
  tags = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_iam_policy" "lambda_secret_policy" {
  name = "lambda_sm_policy"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "secretsmanager:GetSecretValue",
        ]
        Effect   = "Allow"
        Resource = aws_secretsmanager_secret.openai.arn
      },
  ] })
  tags = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_iam_policy" "lambda_bucket_policy" {
  name = "lambda_bucket_policy"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "s3:*",
        ]
        Effect   = "Allow"
        Resource = "${aws_s3_bucket.domain_bucket.arn}/*"
      },
  ] })

  tags = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_iam_policy" "lambda_dynamo_policy" {
  name = "lambda_dynamo_policy"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "dynamodb:DeleteItem",
          "dynamodb:DescribeTable",
          "dynamodb:GetItem",
          "dynamodb:GetRecords",
          "dynamodb:ListTables",
          "dynamodb:PutItem",
          "dynamodb:Query",
          "dynamodb:Scan",
          "dynamodb:UpdateItem",
          "dynamodb:UpdateTable",
        ]
        Effect = "Allow"
        Resource = [
          "${aws_dynamodb_table.dynamotable.arn}",
          "${aws_dynamodb_table.dynamotable.arn}/index/*"
        ]
      },
  ] })
  tags = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_iam_role_policy_attachment" "lambda_sm" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_secret_policy.arn
}

resource "aws_iam_role_policy_attachment" "lambda_bucket" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_bucket_policy.arn
}

resource "aws_iam_role_policy_attachment" "lambda_dynamo" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_dynamo_policy.arn
}

data "archive_file" "generator_package" {
  type        = "zip"
  source_file = "../generator/lambda_function.py"
  output_path = "generator.zip"
}

resource "aws_lambda_function" "generator_function" {
  function_name    = "generate_content"
  filename         = "generator.zip"
  source_code_hash = data.archive_file.generator_package.output_base64sha256
  role             = aws_iam_role.lambda_role.arn
  runtime          = "python3.10"
  handler          = "lambda_function.lambda_handler"
  timeout          = 60
  tags             = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

data "archive_file" "frontend_package" {
  type        = "zip"
  source_file = "../frontend/lambda_function.py"
  output_path = "frontend.zip"
}

resource "aws_lambda_function" "frontend_function" {
  function_name    = "generate_frontend"
  filename         = "frontend.zip"
  source_code_hash = data.archive_file.frontend_package.output_base64sha256
  role             = aws_iam_role.lambda_role.arn
  runtime          = "python3.10"
  handler          = "lambda_function.lambda_handler"
  timeout          = 60
  tags             = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

# EventBridge

resource "aws_cloudwatch_event_rule" "schedule" {
  for_each            = var.contents
  name                = "${each.key}_schedule_rule"
  description         = "trigger generate_content every day"
  schedule_expression = "cron(5 0 * * ? *)"
  tags                = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_cloudwatch_event_target" "lambda_target" {
  for_each = var.contents
  rule     = aws_cloudwatch_event_rule.schedule[each.key].name
  input = jsonencode({
    bucket = aws_s3_bucket.domain_bucket.id,
    folder = each.key,
    prompt = each.value.prompt,
  })
  target_id = "lambda-function-target"
  arn       = aws_lambda_function.generator_function.arn
}

resource "aws_lambda_permission" "allow_cloudwatch" {
  for_each      = var.contents
  statement_id  = "AllowExecutionFromCloudWatch${each.key}"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.generator_function.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.schedule[each.key].arn
}

resource "aws_cloudwatch_event_rule" "frontend_schedule" {
  name                = "frontend_schedule_rule"
  description         = "trigger generate_frontend every day"
  schedule_expression = "cron(10 0 * * ? *)"
  tags                = aws_servicecatalogappregistry_application.autocontenthub_app.application_tag
}

resource "aws_cloudwatch_event_target" "frontend_lambda_target" {
  rule = aws_cloudwatch_event_rule.frontend_schedule.name
  input = jsonencode({
    bucket = aws_s3_bucket.domain_bucket.id,
  })
  target_id = "lambda-function-target"
  arn       = aws_lambda_function.frontend_function.arn
}

resource "aws_lambda_permission" "frontend_allow_cloudwatch" {
  statement_id  = "AllowExecutionFromCloudWatchFrontend"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.frontend_function.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.frontend_schedule.arn
}
